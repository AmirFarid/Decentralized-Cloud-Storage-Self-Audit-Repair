

enclave {

	include "sharedTypes.h"
	from "sgx_tstdc.edl" import *;
	from "sgx_pthread.edl" import *;

	trusted {

		public void ecall_init([in, size=508]FileDataTransfer *fileDataTransfer);
		public int ecall_file_init([out] Tag *tag,[out, size=10, count=numBlocks] uint8_t *sigma, [in, size=508] FileDataTransfer *fileDataTransfer, int numBlocks);
		public void ecall_audit_file([in, string] const char *fileName,[out] int *ret);
		public void ecall_generate_file_parity(int fileNum);
		public void ecall_decode_partition([in, string] const char *fileName, int blockNum);
		public void ecall_peer_init([in, count=64] uint8_t *current_pubKey, [out,count=64] uint8_t *sender_pubKey, [in, string] const char *ip, [out] int *socket_fd, int current_id);
		public void ecall_compare();
		public void ecall_small_corruption([in, string] const char *fileName, int blockNum);
		public void ecall_check_block(int fileNum, int blockNum, uint8_t stat, [out, size=recovered_block_size] uint8_t *recovered_block, int recovered_block_size);
	};

	untrusted {



		void ocall_ftl_init([in, count=64] uint8_t *sgx_pubKey, [out,count=64] uint8_t *ftl_pubKey);

		void ocall_peer_init([in, count=64] uint8_t *current_pubKey, [out,count=64] uint8_t *peer_pubKey, [in, string] const char *ip, int port, [out] int *socket_fd, int current_id);

		void ocall_get_block([out, count=4096] uint8_t *data, size_t segSize, int segPerBlock, int blockNum,[in, size=1024] char *fileName);

		void ocall_printf([in, count=size] unsigned char *buffer, size_t size, int type);

		void ocall_printint([in, count=1] int *buffer);

		void ocall_send_nonce([in, count=16] uint8_t *nonce);

		void ocall_get_segment([in, string] const char *fileName, int segNum,[out, size=SEGMENT_SIZE] uint8_t *segData, int type);

		void ocall_init_parity(int numBits);

		void ocall_send_parity(int startPage, [in, size=size] uint8_t *parityData, size_t size);

		void ocall_end_genPar();

		void ocall_write_partition(int numBits);

		void ocall_write_page(int pageNum, [in, size=2048] uint8_t *pageData);

		void ocall_get_shuffle_key([out, size=16] uint8_t *shuffle_key, [in, size=64] uint8_t *Kexchange_PUB_KEY, [out, size=64] uint8_t *Kexchange_DataOwner_PUB_KEY, [out, size=32] uint8_t *parity_aes_key, [in, string] char *owner_ip, int owner_port);

		void ocall_broadcast_block(int fileNum, int blockNum, [out, size=cw_size] uint8_t *code_word, [out, size=cw_index_size] int *code_word_index, [in, size=cw_index_size] NodeInfo *nodes, int cw_size, int cw_index_size);
	
		void ocall_get_rs_matrix(int k, int m, int symSize, [out, size=matrix_size] int *matrix, int matrix_size);
	};
};




enclave {

	include "sharedTypes.h"
	from "sgx_tstdc.edl" import *;
	from "sgx_pthread.edl" import *;

	trusted {

		public void ecall_init([in, size=size]FileDataTransfer *fileDataTransfer, int size);
		public int ecall_file_init([out] Tag *tag,[out, size=10, count=numBlocks] uint8_t *sigma, [in, size=size] FileDataTransfer *fileDataTransfer, int numBlocks, int size);
		public void ecall_audit_file([in, string] const char *fileName,[out] int *ret);
		public void ecall_generate_file_parity(int fileNum);
		public void ecall_decode_partition([in, string] const char *fileName, int blockNum);
		public void ecall_peer_init([in, count=64] uint8_t *current_pubKey, [out,count=64] uint8_t *sender_pubKey, [in, string] const char *ip, int socket_fd, int current_id, [out] int *peer_id);
		public void ecall_compare();
		public void ecall_small_corruption([in, string] const char *fileName, int blockNum);
		public void ecall_check_block(int fileNum, int blockNum, [out] uint8_t *stat, [out, size=recovered_block_size] uint8_t *recovered_block, int recovered_block_size);
		public void ecall_test_rs([in, size=n] char *data, int k, int n, [in, count=2] int *erasures);

		public void ecall_local_code_words(int fileNum, int code_word_id, [out, size=cw_size] uint8_t *data, int cw_size);

		public void ecall_retrieve_File([in, string] const char *fileName);

	};

	untrusted {



		void ocall_ftl_init([in, count=64] uint8_t *sgx_pubKey, [out,count=64] uint8_t *ftl_pubKey);

		void ocall_peer_init([in, count=64] uint8_t *current_pubKey, [out,count=64] uint8_t *peer_pubKey, [in, string] const char *ip, int port, int current_id, [out] int *peer_id);

		void ocall_get_block([out, count=4096] uint8_t *data, size_t segSize, int segPerBlock, int blockNum,[in, size=1024] char *fileName);

		void ocall_printf([in, count=size] unsigned char *buffer, size_t size, int type);

		void ocall_printint([in, count=1] int *buffer);

		void ocall_send_nonce([in, count=16] uint8_t *nonce);

		void ocall_get_segment([in, string] const char *fileName, int segNum,[out, size=SEGMENT_SIZE] uint8_t *segData, int type);

		void ocall_init_parity(int numBits);

		void ocall_send_parity(int startPage, [in, size=size] uint8_t *parityData, size_t size);

		void ocall_end_genPar();

		void ocall_write_partition(int numBits);

		void ocall_write_page(int pageNum, [in, size=2048] uint8_t *pageData);

		void ocall_get_shuffle_key([out, size=16] uint8_t *shuffle_key, [out, size=32] uint8_t *sig_key, [in, size=64] uint8_t *Kexchange_PUB_KEY, [out, size=64] uint8_t *Kexchange_DataOwner_PUB_KEY, [out, size=32] uint8_t *parity_aes_key, [in, string] char *owner_ip, int owner_port);

		void ocall_get_batch_blocks(int fileNum, [in, size=rb_indicies_size, count=rb_indicies_count]recoverable_block_indicies *rb_indicies, int rb_indicies_size, int rb_indicies_count, [out, size=cw_size] uint8_t *code_word, [out, count=cw_count] int *code_word_index, [in, size=node_size, count=cw_count] NodeInfo *nodes, int cw_size, int cw_count, int node_size);
	
		void ocall_get_rs_matrix(int k, int m, int symSize, [out, size=matrix_size] int *matrix, int matrix_size);

		void ocall_retrieve_block(int fileNum, [in, size=rb_indicies_size] void *rb_indicies_ptr, [in, size=node_size, count=1]  NodeInfo *nodes, [out] uint8_t *stat, [out, size=block_size] uint8_t *data_tmp, int block_size, int node_size, int rb_indicies_size);

		void ocall_retrieve_code_words(int fileNum, int num_code_words, int total_code_words, [out, size=data_tmp_size] uint8_t *data_tmp, int remainder, [in, size=node_size, count=node_count] NodeInfo *node, int num_retrieval_rq_per_peer, int node_size, int node_count, int data_tmp_size);

	};
};


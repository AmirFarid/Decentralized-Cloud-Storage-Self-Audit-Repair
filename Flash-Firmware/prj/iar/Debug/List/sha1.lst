###############################################################################
#
# IAR ANSI C/C++ Compiler V7.40.5.9725/W32 for ARM        28/Oct/2023  18:58:37
# Copyright 1999-2015 IAR Systems AB.
#
#    Cpu mode     =  thumb
#    Endian       =  little
#    Source file  =  C:\Users\bchen-adm\Desktop\nsac-hiftl-dc\core\ftl\sha1.c
#    Command line =  
#        C:\Users\bchen-adm\Desktop\nsac-hiftl-dc\core\ftl\sha1.c -D
#        BOOT_LEVEL_2 -lcN
#        C:\Users\bchen-adm\Desktop\nsac-hiftl-dc\prj\iar\Debug\List -o
#        C:\Users\bchen-adm\Desktop\nsac-hiftl-dc\prj\iar\Debug\Obj --no_cse
#        --no_unroll --no_inline --no_code_motion --no_tbaa --no_clustering
#        --no_scheduling --debug --endian=little --cpu=ARM926EJ-S -e --fpu=None
#        --dlib_config "C:\Program Files (x86)\IAR Systems\Embedded Workbench
#        7.2\arm\INC\c\DLib_Config_Normal.h" -I
#        C:\Users\bchen-adm\Desktop\nsac-hiftl-dc\prj\iar\..\..\ -I
#        C:\Users\bchen-adm\Desktop\nsac-hiftl-dc\prj\iar\..\..\sys\lpc313x\bsp\
#        -I
#        C:\Users\bchen-adm\Desktop\nsac-hiftl-dc\prj\iar\..\..\sys\lpc313x\csp\
#        -I
#        C:\Users\bchen-adm\Desktop\nsac-hiftl-dc\prj\iar\..\..\sys\lpc313x\lib\
#        -I
#        C:\Users\bchen-adm\Desktop\nsac-hiftl-dc\prj\iar\..\..\sys\lpc313x\usb\
#        --cpu_mode thumb -Ol --use_c++_inline
#    List file    =  
#        C:\Users\bchen-adm\Desktop\nsac-hiftl-dc\prj\iar\Debug\List\sha1.lst
#    Object file  =  
#        C:\Users\bchen-adm\Desktop\nsac-hiftl-dc\prj\iar\Debug\Obj\sha1.o
#
###############################################################################

C:\Users\bchen-adm\Desktop\nsac-hiftl-dc\core\ftl\sha1.c
      1          /**
      2          * @file sha1.c SHA-1 in C
      3          */
      4          
      5          /*
      6          By Steve Reid <sreid@sea-to-sky.net>
      7          100% Public Domain
      8          
      9          -----------------
     10          Modified 7/98
     11          By James H. Brown <jbrown@burgoyne.com>
     12          Still 100% Public Domain
     13          
     14          Corrected a problem which generated improper hash values on 16 bit machines
     15          Routine SHA1Update changed from
     16          	void SHA1Update(SHA1_CTX* context, unsigned char* data, unsigned int
     17          len)
     18          to
     19          	void SHA1Update(SHA1_CTX* context, unsigned char* data, unsigned
     20          long len)
     21          
     22          The 'len' parameter was declared an int which works fine on 32 bit machines.
     23          However, on 16 bit machines an int is too small for the shifts being done
     24          against
     25          it.  This caused the hash function to generate incorrect values if len was
     26          greater than 8191 (8K - 1) due to the 'len << 3' on line 3 of SHA1Update().
     27          
     28          Since the file IO in main() reads 16K at a time, any file 8K or larger would
     29          be guaranteed to generate the wrong hash (e.g. Test Vector #3, a million
     30          "a"s).
     31          
     32          I also changed the declaration of variables i & j in SHA1Update to
     33          unsigned long from unsigned int for the same reason.
     34          
     35          These changes should make no difference to any 32 bit implementations since
     36          an
     37          int and a long are the same size in those environments.
     38          
     39          --
     40          I also corrected a few compiler warnings generated by Borland C.
     41          1. Added #include <process.h> for exit() prototype
     42          2. Removed unused variable 'j' in SHA1Final
     43          3. Changed exit(0) to return(0) at end of main.
     44          
     45          ALL changes I made can be located by searching for comments containing 'JHB'
     46          -----------------
     47          Modified 8/98
     48          By Steve Reid <sreid@sea-to-sky.net>
     49          Still 100% public domain
     50          
     51          1- Removed #include <process.h> and used return() instead of exit()
     52          2- Fixed overwriting of finalcount in SHA1Final() (discovered by Chris Hall)
     53          3- Changed email address from steve@edmweb.com to sreid@sea-to-sky.net
     54          
     55          -----------------
     56          Modified 4/01
     57          By Saul Kravitz <Saul.Kravitz@celera.com>
     58          Still 100% PD
     59          Modified to run on Compaq Alpha hardware.
     60          
     61          -----------------
     62          Modified 07/2002
     63          By Ralph Giles <giles@artofcode.com>
     64          Still 100% public domain
     65          modified for use with stdint types, autoconf
     66          code cleanup, removed attribution comments
     67          switched SHA1Final() argument order for consistency
     68          use SHA1_ prefix for public api
     69          move public api to sha1.h
     70          */
     71          
     72          /*
     73          Test Vectors (from FIPS PUB 180-1)
     74          "abc"
     75            A9993E36 4706816A BA3E2571 7850C26C 9CD0D89D
     76          "abcdbcdecdefdefgefghfghighijhijkijkljklmklmnlmnomnopnopq"
     77            84983E44 1C3BD26E BAAE4AA1 F95129E5 E54670F1
     78          A million repetitions of "a"
     79            34AA973C D4C4DAA4 F61EEB2B DBAD2731 6534016F
     80          */
     81          
     82          #define SHA1HANDSOFF (1)
     83          
     84          #include <stdint.h>
     85          
     86          #ifdef HAVE_CONFIG_H
     87          #include "config.h"
     88          #endif
     89          
     90          #include <stdio.h>
     91          #include <string.h>
     92          #include "sha.h"
     93          
     94          void SHA1_Transform(uint32_t state[5], const uint8_t buffer[64]);
     95          
     96          #define rol(value, bits) (((value) << (bits)) | ((value) >> (32 - (bits))))
     97          
     98          #if defined (BYTE_ORDER) && defined(BIG_ENDIAN) && (BYTE_ORDER == BIG_ENDIAN)
     99          #define WORDS_BIGENDIAN 1
    100          #endif
    101          #ifdef _BIG_ENDIAN
    102          #define WORDS_BIGENDIAN 1
    103          #endif
    104          
    105          
    106          /* blk0() and blk() perform the initial expand. */
    107          /* I got the idea of expanding during the round function from SSLeay */
    108          /* FIXME: can we do this in an endian-proof way? */
    109          #ifdef WORDS_BIGENDIAN
    110          #define blk0(i) block->l[i]
    111          #else
    112          #define blk0(i) (block->l[i] = (rol(block->l[i],24)&0xff00ff00) \
    113                   |(rol(block->l[i],8)&0x00ff00ff))
    114          #endif
    115          #define blk(i) (block->l[i&15] = rol(block->l[(i+13)&15]^block->l[(i+8)&15] \
    116                               ^block->l[(i+2)&15]^block->l[i&15],1))
    117          
    118          /* (R0+R1), R2, R3, R4 are the different operations used in SHA1 */
    119          #define R0(v, w, x, y, z, i) \
    120              z+=((w&(x^y))^y)+blk0(i)+0x5a827999+rol(v,5);w=rol(w,30);
    121          #define R1(v, w, x, y, z, i) \
    122              z+=((w&(x^y))^y)+blk(i)+0x5a827999+rol(v,5);w=rol(w,30);
    123          #define R2(v, w, x, y, z, i) \
    124              z+=(w^x^y)+blk(i)+0x6ed9eba1+rol(v,5);w=rol(w,30);
    125          #define R3(v, w, x, y, z, i) \
    126              z+=(((w|x)&y)|(w&x))+blk(i)+0x8f1bbcdc+rol(v,5);w=rol(w,30);
    127          #define R4(v, w, x, y, z, i) \
    128              z+=(w^x^y)+blk(i)+0xca62c1d6+rol(v,5);w=rol(w,30);
    129          
    130          
    131          /* Hash a single 512-bit block. This is the core of the algorithm. */
    132          void SHA1_Transform(uint32_t state[5], const uint8_t buffer[64]) {
    133              uint32_t a, b, c, d, e;
    134              typedef union {
    135                  uint8_t c[64];
    136                  uint32_t l[16];
    137              } CHAR64LONG16;
    138              CHAR64LONG16 *block;
    139          
    140          #ifdef SHA1HANDSOFF
    141              CHAR64LONG16 workspace;
    142              block = &workspace;
    143              memcpy(block, buffer, 64);
    144          #else
    145          	block = (CHAR64LONG16*)buffer;
    146          #endif
    147          
    148              /* Copy context->state[] to working vars */
    149              a = state[0];
    150              b = state[1];
    151              c = state[2];
    152              d = state[3];
    153              e = state[4];
    154          
    155              /* 4 rounds of 20 operations each. Loop unrolled. */
    156              R0(a, b, c, d, e, 0);
    157              R0(e, a, b, c, d, 1);
    158              R0(d, e, a, b, c, 2);
    159              R0(c, d, e, a, b, 3);
    160              R0(b, c, d, e, a, 4);
    161              R0(a, b, c, d, e, 5);
    162              R0(e, a, b, c, d, 6);
    163              R0(d, e, a, b, c, 7);
    164              R0(c, d, e, a, b, 8);
    165              R0(b, c, d, e, a, 9);
    166              R0(a, b, c, d, e, 10);
    167              R0(e, a, b, c, d, 11);
    168              R0(d, e, a, b, c, 12);
    169              R0(c, d, e, a, b, 13);
    170              R0(b, c, d, e, a, 14);
    171              R0(a, b, c, d, e, 15);
    172              R1(e, a, b, c, d, 16);
    173              R1(d, e, a, b, c, 17);
    174              R1(c, d, e, a, b, 18);
    175              R1(b, c, d, e, a, 19);
    176              R2(a, b, c, d, e, 20);
    177              R2(e, a, b, c, d, 21);
    178              R2(d, e, a, b, c, 22);
    179              R2(c, d, e, a, b, 23);
    180              R2(b, c, d, e, a, 24);
    181              R2(a, b, c, d, e, 25);
    182              R2(e, a, b, c, d, 26);
    183              R2(d, e, a, b, c, 27);
    184              R2(c, d, e, a, b, 28);
    185              R2(b, c, d, e, a, 29);
    186              R2(a, b, c, d, e, 30);
    187              R2(e, a, b, c, d, 31);
    188              R2(d, e, a, b, c, 32);
    189              R2(c, d, e, a, b, 33);
    190              R2(b, c, d, e, a, 34);
    191              R2(a, b, c, d, e, 35);
    192              R2(e, a, b, c, d, 36);
    193              R2(d, e, a, b, c, 37);
    194              R2(c, d, e, a, b, 38);
    195              R2(b, c, d, e, a, 39);
    196              R3(a, b, c, d, e, 40);
    197              R3(e, a, b, c, d, 41);
    198              R3(d, e, a, b, c, 42);
    199              R3(c, d, e, a, b, 43);
    200              R3(b, c, d, e, a, 44);
    201              R3(a, b, c, d, e, 45);
    202              R3(e, a, b, c, d, 46);
    203              R3(d, e, a, b, c, 47);
    204              R3(c, d, e, a, b, 48);
    205              R3(b, c, d, e, a, 49);
    206              R3(a, b, c, d, e, 50);
    207              R3(e, a, b, c, d, 51);
    208              R3(d, e, a, b, c, 52);
    209              R3(c, d, e, a, b, 53);
    210              R3(b, c, d, e, a, 54);
    211              R3(a, b, c, d, e, 55);
    212              R3(e, a, b, c, d, 56);
    213              R3(d, e, a, b, c, 57);
    214              R3(c, d, e, a, b, 58);
    215              R3(b, c, d, e, a, 59);
    216              R4(a, b, c, d, e, 60);
    217              R4(e, a, b, c, d, 61);
    218              R4(d, e, a, b, c, 62);
    219              R4(c, d, e, a, b, 63);
    220              R4(b, c, d, e, a, 64);
    221              R4(a, b, c, d, e, 65);
    222              R4(e, a, b, c, d, 66);
    223              R4(d, e, a, b, c, 67);
    224              R4(c, d, e, a, b, 68);
    225              R4(b, c, d, e, a, 69);
    226              R4(a, b, c, d, e, 70);
    227              R4(e, a, b, c, d, 71);
    228              R4(d, e, a, b, c, 72);
    229              R4(c, d, e, a, b, 73);
    230              R4(b, c, d, e, a, 74);
    231              R4(a, b, c, d, e, 75);
    232              R4(e, a, b, c, d, 76);
    233              R4(d, e, a, b, c, 77);
    234              R4(c, d, e, a, b, 78);
    235              R4(b, c, d, e, a, 79);
    236          
    237              /* Add the working vars back into context.state[] */
    238              state[0] += a;
    239              state[1] += b;
    240              state[2] += c;
    241              state[3] += d;
    242              state[4] += e;
    243          
    244              /* Wipe variables */
    245              a = b = c = d = e = 0;
    246          }
    247          
    248          
    249          /**
    250          * Initialize new context
    251          *
    252          * @param context SHA1-Context
    253          */
    254          void SHA1_Init(SHA1_CTX *context) {
    255              /* SHA1 initialization constants */
    256              context->state[0] = 0x67452301;
    257              context->state[1] = 0xefcdab89;
    258              context->state[2] = 0x98badcfe;
    259              context->state[3] = 0x10325476;
    260              context->state[4] = 0xc3d2e1f0;
    261              context->count[0] = context->count[1] = 0;
    262          }
    263          
    264          
    265          /**
    266          * Run your data through this
    267          *
    268          * @param context SHA1-Context
    269          * @param p       Buffer to run SHA1 on
    270          * @param len     Number of bytes
    271          */
    272          void SHA1_Update(SHA1_CTX *context, const void *p, size_t len) {
    273              const uint8_t *data = p;
    274              size_t i, j;
    275          
    276              j = (context->count[0] >> 3) & 63;
    277              if ((context->count[0] += (uint32_t) (len << 3)) < (len << 3)) {
    278                  context->count[1]++;
    279              }
    280              context->count[1] += (uint32_t) (len >> 29);
    281              if ((j + len) > 63) {
    282                  memcpy(&context->buffer[j], data, (i = 64 - j));
    283                  SHA1_Transform(context->state, context->buffer);
    284                  for (; i + 63 < len; i += 64) {
    285                      SHA1_Transform(context->state, data + i);
    286                  }
    287                  j = 0;
    288              }
    289              else i = 0;
    290              memcpy(&context->buffer[j], &data[i], len - i);
    291          }
    292          
    293          
    294          /**
    295          * Add padding and return the message digest
    296          *
    297          * @param digest  Generated message digest
    298          * @param context SHA1-Context
    299          */
    300          void SHA1_Final(uint8_t digest[SHA1_DIGEST_SIZE], SHA1_CTX *context) {
    301              uint32_t i;
    302              uint8_t finalcount[8];
    303          
    304              for (i = 0; i < 8; i++) {
    305                  finalcount[i] = (uint8_t) ((context->count[(i >= 4 ? 0 : 1)]
    306                          >> ((3 - (i & 3)) * 8)) & 255);
    307              }
    308              SHA1_Update(context, (uint8_t *) "\200", 1);
    309              while ((context->count[0] & 504) != 448) {
    310                  SHA1_Update(context, (uint8_t *) "\0", 1);
    311              }
    312              SHA1_Update(context, finalcount, 8); /* Should cause SHA1_Transform */
    313              for (i = 0; i < SHA1_DIGEST_SIZE; i++) {
    314                  digest[i] = (uint8_t)
    315                          ((context->state[i >> 2] >> ((3 - (i & 3)) * 8)) & 255);
    316              }
    317          
    318              /* Wipe variables */
    319              i = 0;
    320              memset(context->buffer, 0, 64);
    321              memset(context->state, 0, 20);
    322              memset(context->count, 0, 8);
    323              memset(finalcount, 0, 8);    /* SWR */
    324          
    325          #ifdef SHA1HANDSOFF  /* make SHA1Transform overwrite its own static vars */
    326              SHA1_Transform(context->state, context->buffer);
    327          #endif
    328          }

   Maximum stack usage in bytes:

   .cstack Function
   ------- --------
      24   SHA1_Final
        24   -> SHA1_Transform
        24   -> SHA1_Update
        24   -> __aeabi_memset
       0   SHA1_Init
      96   SHA1_Transform
        96   -> __aeabi_memcpy
      24   SHA1_Update
        24   -> SHA1_Transform
        24   -> __aeabi_memcpy


   Section sizes:

   Bytes  Function/Label
   -----  --------------
       4  ??DataTable2
       4  ??DataTable2_1
       4  ??DataTable2_2
       4  ??DataTable2_3
       4  ??DataTable2_4
       4  ??DataTable2_5
       4  ??DataTable2_6
       4  ??DataTable2_7
       2  ?_0
       2  ?_1
     204  SHA1_Final
      30  SHA1_Init
    5616  SHA1_Transform
     126  SHA1_Update

 
     4 bytes in section .rodata
 6 008 bytes in section .text
 
 6 008 bytes of CODE  memory
     4 bytes of CONST memory

Errors: none
Warnings: 1

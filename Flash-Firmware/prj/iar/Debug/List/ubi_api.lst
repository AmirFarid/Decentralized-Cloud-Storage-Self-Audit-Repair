###############################################################################
#
# IAR ANSI C/C++ Compiler V7.40.5.9725/W32 for ARM        28/Oct/2023  18:58:37
# Copyright 1999-2015 IAR Systems AB.
#
#    Cpu mode     =  thumb
#    Endian       =  little
#    Source file  =  
#        C:\Users\bchen-adm\Desktop\nsac-hiftl-dc\core\ubi\ubi_api.c
#    Command line =  
#        C:\Users\bchen-adm\Desktop\nsac-hiftl-dc\core\ubi\ubi_api.c -D
#        BOOT_LEVEL_2 -lcN
#        C:\Users\bchen-adm\Desktop\nsac-hiftl-dc\prj\iar\Debug\List -o
#        C:\Users\bchen-adm\Desktop\nsac-hiftl-dc\prj\iar\Debug\Obj --no_cse
#        --no_unroll --no_inline --no_code_motion --no_tbaa --no_clustering
#        --no_scheduling --debug --endian=little --cpu=ARM926EJ-S -e --fpu=None
#        --dlib_config "C:\Program Files (x86)\IAR Systems\Embedded Workbench
#        7.2\arm\INC\c\DLib_Config_Normal.h" -I
#        C:\Users\bchen-adm\Desktop\nsac-hiftl-dc\prj\iar\..\..\ -I
#        C:\Users\bchen-adm\Desktop\nsac-hiftl-dc\prj\iar\..\..\sys\lpc313x\bsp\
#        -I
#        C:\Users\bchen-adm\Desktop\nsac-hiftl-dc\prj\iar\..\..\sys\lpc313x\csp\
#        -I
#        C:\Users\bchen-adm\Desktop\nsac-hiftl-dc\prj\iar\..\..\sys\lpc313x\lib\
#        -I
#        C:\Users\bchen-adm\Desktop\nsac-hiftl-dc\prj\iar\..\..\sys\lpc313x\usb\
#        --cpu_mode thumb -Ol --use_c++_inline
#    List file    =  
#        C:\Users\bchen-adm\Desktop\nsac-hiftl-dc\prj\iar\Debug\List\ubi_api.lst
#    Object file  =  
#        C:\Users\bchen-adm\Desktop\nsac-hiftl-dc\prj\iar\Debug\Obj\ubi_api.o
#
###############################################################################

C:\Users\bchen-adm\Desktop\nsac-hiftl-dc\core\ubi\ubi_api.c
      1          /*********************************************************
      2           * Module name: ubi_api.c
      3           *
      4           * Copyright 2010, 2011. All Rights Reserved, Crane Chu.
      5           *
      6           * This file is part of OpenNFM.
      7           *
      8           * OpenNFM is free software: you can redistribute it and/or 
      9           * modify it under the terms of the GNU General Public 
     10           * License as published by the Free Software Foundation, 
     11           * either version 3 of the License, or (at your option) any 
     12           * later version.
     13           * 
     14           * OpenNFM is distributed in the hope that it will be useful,
     15           * but WITHOUT ANY WARRANTY; without even the implied 
     16           * warranty of MERCHANTABILITY or FITNESS FOR A PARTICULAR 
     17           * PURPOSE. See the GNU General Public License for more 
     18           * details.
     19           *
     20           * You should have received a copy of the GNU General Public 
     21           * License along with OpenNFM. If not, see 
     22           * <http://www.gnu.org/licenses/>.
     23           *
     24           * First written on 2010-01-01 by cranechu@gmail.com
     25           *
     26           * Module Description:
     27           *    Unsorted Block Image.
     28           *
     29           *********************************************************/
     30          
     31          #include <core\inc\cmn.h>
     32          #include <core\inc\mtd.h>
     33          #include <core\inc\ubi.h>
     34          #include <core\inc\buf.h>
     35          #include <sys\sys.h>
     36          #include "ubi_inc.h"
     37          
     38          /* NOTICE:
     39           * PHY_BLOCK place die (channel/chip/die) index in low bits,
     40           * one PHY_BLOCK combines blocks in multiple planes.
     41           */
     42          
     43          typedef struct {
     44            LOG_BLOCK log_block;
     45            PHY_BLOCK phy_block; /* INVALID_BLOCK for empty slot */
     46            ERASE_COUNT ec;
     47            PAGE_OFF page;
     48            void* buffer;
     49            SPARE spare;
     50          } DIE_HOLD_PAGE;
     51          
     52          static DIE_HOLD_PAGE dice_hold[TOTAL_DIE_COUNT];
     53          static UINT8 tmp_data_buffer[MPP_SIZE];
     54          
     55          static STATUS ubi_reclaim_badblock(LOG_BLOCK log_block, PHY_BLOCK phy_block,
     56                                             ERASE_COUNT phy_block_ec, PAGE_OFF bad_page,
     57                                             PHY_BLOCK* new_phy_block,
     58                                             ERASE_COUNT* new_ec);
     59          
     60          static UINT32 ubi_find_die_buffer(PHY_BLOCK block);
     61          
     62          STATUS UBI_Format() {
     63            AREA area = 0;
     64            PHY_BLOCK block_count;
     65            PHY_BLOCK remaining_count;
     66            PHY_BLOCK total_data_block = 0;
     67            PHY_BLOCK fmt_current_block = DATA_FIRST_BLOCK;//7
     68            STATUS ret = STATUS_SUCCESS;  
     69            //jsj增加  
     70            ANCHOR_Format_Clean();//先擦除6个anchor 块
     71            /* try to read out only the anchor table first for bad block table */
     72            ret = ANCHOR_Init();
     73            //擦除6个anchor 块后将导致每次上电都读anchor table失败
     74            //然后会重新扫描所有物理块，建立坏块表
     75            if (ret != STATUS_SUCCESS) {
     76              int bad_blk=0;
     77              PHY_BLOCK block;
     78              uart_printf("******UBI_Format():Blocks Layout****\r\n");
     79              /* detect bad block and build up the bad block table */
     80              for (block = 0; block < CFG_LOG_BLOCK_COUNT; block++) {
     81                 //jsj 修改
     82                /*
     83                ret = MTD_CheckBlock(block);
     84                if (ret == STATUS_SUCCESS) {
     85                  ret = MTD_Erase(block);
     86                }
     87                if (ret != STATUS_SUCCESS) {
     88                  uart_printf("%s: find a bad block: %d\r\n", __func__,block);
     89                  ANCHOR_LogBadBlock(block);
     90                }
     91                */
     92                ret = MTD_Erase(block);
     93                if (ret != STATUS_BADBLOCK) 
     94                {
     95                  ret = MTD_CheckBlock(block);        
     96                }
     97                if (ret == STATUS_BADBLOCK)
     98                {
     99                  bad_blk++;
    100                  uart_printf("%s: find a bad block: %d.Bad block - %u\n", __func__, bad_blk, block);
    101                  ANCHOR_LogBadBlock(block);
    102                }      
    103              }
    104            }  
    105              
    106            do {
    107              ASSERT(fmt_current_block < DATA_BLOCK_COUNT);    
    108              //jsj修改
    109              //remaining_count = DATA_BLOCK_COUNT - fmt_current_block;
    110              remaining_count = (DATA_BLOCK_COUNT+DATA_FIRST_BLOCK) - fmt_current_block;
    111              block_count = MIN(remaining_count, CFG_PHY_BLOCK_PER_AREA); 
    112              
    113              //uart_printf("%s: area=%d,fmt_current_block=%d,block_count=%d\r\n",__func__,area,fmt_current_block,block_count);
    114              
    115              /* formatting area */
    116              fmt_current_block = AREA_Format(block_count, fmt_current_block, area);
    117              if (fmt_current_block != INVALID_BLOCK) {
    118                area++;
    119                /* TODO: consider bad block. Count read total_data_block in AREA_Format. */
    120                total_data_block += block_count;
    121              } else {
    122                break;
    123              }
    124            } while (fmt_current_block < DATA_BLOCK_COUNT);
    125            
    126            uart_printf("total_data_block=%d\r\n",total_data_block);
    127              
    128          
    129            if (fmt_current_block != INVALID_BLOCK) {
    130              //jsj增加  保证Index block是好块  
    131              while (ANCHOR_IsBadBlock(fmt_current_block) == TRUE) {
    132                fmt_current_block++;
    133              }
    134              /* formatting index */
    135              //uart_printf("%s Index PEB = %d\n", __func__, fmt_current_block);
    136              fmt_current_block = INDEX_Format(CFG_LOG_BLOCK_COUNT, fmt_current_block);
    137            }
    138          
    139            if (fmt_current_block != INVALID_BLOCK) {
    140              ASSERT(fmt_current_block == CFG_LOG_BLOCK_COUNT);
    141              /* formatting anchor */
    142              ret = ANCHOR_Format(total_data_block);
    143            } else {
    144              /* write anchor table to log bad block table */
    145              (void) ANCHOR_Format(INVALID_BLOCK);
    146              ret = STATUS_UBI_FORMAT_ERROR;
    147            }  
    148            return ret;
    149          }
    150          
    151          STATUS UBI_Init() {
    152            AREA area;
    153            AREA updating_area;
    154            UINT32 die;
    155            PHY_BLOCK updating_logical_block = INVALID_BLOCK;
    156            PHY_BLOCK updating_origin_block = INVALID_BLOCK;
    157            ERASE_COUNT updating_block_ec = INVALID_EC;
    158            STATUS ret;
    159          
    160            ret = ANCHOR_Init();
    161            if (ret == STATUS_SUCCESS) {
    162              /* init/plr index table, and get the plr info of area update */
    163              ret = INDEX_Init(&updating_logical_block, &updating_origin_block,
    164                               &updating_block_ec);
    165            }
    166            //uart_printf("**%s**: %d,%d,%d\r\n", __func__,updating_logical_block,updating_origin_block,updating_block_ec);
    167          
    168            if (ret == STATUS_SUCCESS) {
    169              /* find the updating area */
    170              if (updating_logical_block != INVALID_BLOCK) {
    171                updating_area = AREA_INDEX(updating_logical_block);
    172              } else {
    173                updating_area = INVALID_AREA;
    174              }
    175              for (area = 0; area < AREA_COUNT; area++) {
    176                /* read out the area table, and setup the area offset table */
    177                ret = AREA_Init(area);
    178                if (ret == STATUS_SUCCESS) {
    179                  if (area == updating_area) {
    180                    /* check the data of the area for PLR */          
    181                    uart_printf("**%s**:updating_area=%d\r\n", __func__,updating_area);          
    182                    if (AREA_CheckUpdatePLR(updating_logical_block, updating_origin_block,updating_block_ec) == TRUE) {
    183                      /* continue to update the area table */
    184                      INDEX_Update_AreaUpdate(updating_logical_block, updating_origin_block, updating_block_ec);
    185                      ret = INDEX_Update_Commit();
    186                    }
    187                  }
    188                } else {
    189                  break;
    190                }
    191              }
    192            }
    193            if (ret == STATUS_SUCCESS) {
    194              for (die = 0; die < TOTAL_DIE_COUNT; die++) {
    195                dice_hold[die].phy_block = INVALID_BLOCK;
    196              }
    197            }
    198            return ret;
    199          }
    200          
    201          STATUS UBI_Read(LOG_BLOCK block, PAGE_OFF page, void* buffer, SPARE spare) {
    202            PHY_BLOCK phy_block;
    203            STATUS ret = STATUS_SUCCESS;
    204          
    205            if (block != INVALID_BLOCK && page != INVALID_PAGE) {
    206                
    207              phy_block = AREA_GetBlock(block); 
    208              
    209              ASSERT(phy_block != INVALID_BLOCK);
    210              /* TODO: handle the read fail issue, or ECC danger issue */
    211              ret = MTD_Read(phy_block, page, buffer, spare);
    212            } else {
    213              ASSERT(block == INVALID_BLOCK && page == INVALID_PAGE);
    214              /* read from invalid page, fill the empty buffer all ZERO */
    215              memset(buffer, 0, MPP_SIZE);
    216            }
    217            return ret;
    218          }
    219          
    220          STATUS UBI_Write(LOG_BLOCK block, PAGE_OFF page, void* buffer, SPARE spare,BOOL async) {
    221            ERASE_COUNT phy_block_ec;
    222            ERASE_COUNT new_ec;
    223            PHY_BLOCK phy_block;
    224            PHY_BLOCK new_phy_block = INVALID_BLOCK;
    225            STATUS ret;
    226            UINT32 die_index = 0;
    227          
    228            phy_block = AREA_GetBlock(block); 
    229            phy_block_ec = AREA_GetEC(block);
    230            ASSERT(phy_block != INVALID_BLOCK);
    231          
    232            /* check the last page status on the same die */
    233            ret = MTD_WaitReady(phy_block);
    234            while (ret == STATUS_BADBLOCK) {
    235              /* find the buffer in the same die */
    236              die_index = ubi_find_die_buffer(phy_block);
    237          
    238              ASSERT(dice_hold[die_index].phy_block != INVALID_BLOCK);
    239          
    240              /* reclaim earlier pages */
    241              ret = ubi_reclaim_badblock(dice_hold[die_index].log_block,
    242                                         dice_hold[die_index].phy_block,
    243                                         dice_hold[die_index].ec,
    244                                         dice_hold[die_index].page, &new_phy_block,
    245                                         &new_ec);
    246              if (ret == STATUS_SUCCESS && dice_hold[die_index].phy_block != INVALID_BLOCK) {
    247                dice_hold[die_index].phy_block = new_phy_block;
    248                dice_hold[die_index].ec = new_ec;
    249                /* write last page in die buffer */
    250                //jsj 下面写的应是坏块中坏页的内容
    251                ret = MTD_Program(new_phy_block, dice_hold[die_index].page,
    252                                  dice_hold[die_index].buffer,
    253                                  dice_hold[die_index].spare);
    254              }
    255              if (ret == STATUS_SUCCESS) {
    256                ret = MTD_WaitReady(new_phy_block);
    257                
    258              }
    259            }
    260          
    261            if (ret == STATUS_SUCCESS && dice_hold[die_index].phy_block != INVALID_BLOCK) {
    262              ASSERT(dice_hold[die_index].buffer != NULL);
    263          
    264              /* release the die buffer */
    265              BUF_Free(dice_hold[die_index].buffer);
    266              dice_hold[die_index].buffer = NULL;
    267              dice_hold[die_index].phy_block = INVALID_BLOCK;
    268            }
    269              
    270            if (ret == STATUS_SUCCESS && page != INVALID_PAGE) {
    271              ASSERT(buffer != NULL);
    272              /* write current page */
    273              ret = MTD_Program(phy_block, page, buffer, spare);
    274            }
    275          
    276            if (ret == STATUS_SUCCESS && page != INVALID_PAGE) {
    277              ASSERT(buffer != NULL);
    278              if (async == FALSE) {
    279                ret = MTD_WaitReady(phy_block);
    280                while (ret == STATUS_BADBLOCK) {
    281                  ret = ubi_reclaim_badblock(block, phy_block, phy_block_ec, page,
    282                                             &new_phy_block, &new_ec);
    283                  if (ret == STATUS_SUCCESS) {
    284                    /* write last page in die buffer */
    285                    ret = MTD_Program(new_phy_block, page, buffer, spare);
    286                  }
    287          
    288                  if (ret == STATUS_SUCCESS) {
    289                    ret = MTD_WaitReady(new_phy_block);
    290                    // Bo: I suspect the following while loop has some bugs when the SSD needs to reclaim bad blocks mutiple times. 
    291                    // a correct way should update the old phy_block with the new_phy_block during each loop
    292                    // the following lines added by Bo to fix the bug
    293                    phy_block = new_phy_block;
    294                    phy_block_ec = new_ec;
    295                  }
    296                }
    297                ASSERT(ret == STATUS_SUCCESS);
    298                BUF_Free(buffer);
    299              } else {
    300                /* save in dice_hold */
    301                dice_hold[die_index].log_block = block;
    302                dice_hold[die_index].phy_block = phy_block;
    303                dice_hold[die_index].ec = phy_block_ec;
    304                dice_hold[die_index].page = page;
    305                dice_hold[die_index].buffer = buffer;
    306                dice_hold[die_index].spare[0] = spare[0];
    307                dice_hold[die_index].spare[1] = spare[1];
    308              }
    309            }
    310            return ret;
    311          }
    312          
    313          STATUS UBI_Flush() {
    314            UINT32 i;
    315            STATUS ret = STATUS_SUCCESS;
    316          
    317            for (i = 0; i < TOTAL_DIE_COUNT; i++) {
    318              if (ret == STATUS_SUCCESS) {
    319                /* check the status of a write buffer in one die */
    320                ret = UBI_Write(dice_hold[i].log_block, INVALID_PAGE, NULL, NULL, TRUE);
    321              }
    322            }
    323          
    324            return ret;
    325          }
    326          
    327          STATUS UBI_Erase(LOG_BLOCK block, LOG_BLOCK die_index) {
    328            STATUS ret = STATUS_SUCCESS;
    329            UINT32 die = die_index % TOTAL_DIE_COUNT;//只有一个die，die=0
    330            PHY_BLOCK phy_block = INVALID_BLOCK;
    331            ERASE_COUNT ec = INVALID_EC;
    332            static UINT32 last_position = 0;
    333            /* flush the program on the same die with the block to erase */
    334            ret = UBI_Write(dice_hold[die].log_block, INVALID_PAGE, NULL, NULL, TRUE);
    335            if (ret == STATUS_SUCCESS) {
    336              ret = INDEX_FreeBlock_Get(die_index % TOTAL_DIE_COUNT, &phy_block, &ec);
    337            }
    338          
    339            if (ret == STATUS_SUCCESS) {
    340              ASSERT(block != INVALID_BLOCK && ec != INVALID_EC);
    341              INDEX_FreeBlock_Put(AREA_GetBlock(block), AREA_GetEC(block));
    342              INDEX_Update_AreaUpdate(block, phy_block, ec);
    343              ret = INDEX_Update_Commit();
    344            }
    345          
    346            if (last_position < 300)
    347              last_position++;
    348            else {
    349              //reset the counter
    350              last_position = 0;
    351              if (ret == STATUS_SUCCESS) {
    352                ret = UBI_Flush();
    353              }
    354          
    355              if (ret == STATUS_SUCCESS) {
    356                ret = UBI_SWL();
    357              }
    358            }
    359            return ret;
    360          }
    361          
    362          STATUS UBI_SWL() {
    363            BLOCK_OFF min_block_offset;
    364            PHY_BLOCK min_physical_block;
    365            ERASE_COUNT min_block_ec;
    366            PHY_BLOCK max_physical_block;
    367            ERASE_COUNT max_block_ec;
    368            PHY_BLOCK logical_block;
    369            PAGE_OFF i;
    370            STATUS ret = STATUS_SUCCESS;
    371            SPARE spare;
    372          
    373            /* static wear leveling (SWL):
    374             * pooling one area, and get the block with min EC in the area,
    375             * exchange it with the max EC block in FBT, if their EC
    376             * difference is larger than a threshold.*/
    377            //用（N:空闲块表擦除次数最大的块）替换掉（M:area正使用块中擦除次数最小的块）
    378            //因为M中的数据一般就是cold数据，可以转存到擦除较大的块中。  
    379            min_block_offset = AREA_FindMinECBlock(anchor_table.swl_current_area,
    380                                                   &min_physical_block, &min_block_ec);
    381            INDEX_FreeBlock_GetMaxECBlock(&max_physical_block, &max_block_ec);
    382          
    383            /* check if SWL is required */
    384            if (max_physical_block != min_physical_block&& max_physical_block != INVALID_BLOCK
    385                && min_physical_block != INVALID_BLOCK && max_block_ec != INVALID_EC
    386                && min_block_ec != INVALID_EC && max_block_ec > min_block_ec
    387                && max_block_ec - min_block_ec > STATIC_WL_THRESHOLD) {
    388          
    389              /* erase the new max-ec-block first */
    390              ret = MTD_Erase(max_physical_block);
    391          
    392              /* copy data from min ec block to max ec block. */
    393              for (i = 0; i < PAGE_PER_PHY_BLOCK; i++) {
    394                if (ret == STATUS_SUCCESS) {
    395                  /* may read erased page, so acceptable error happen */
    396                  (void) MTD_Read(min_physical_block, i, tmp_data_buffer, spare);
    397                  ret = MTD_Program(max_physical_block, i, tmp_data_buffer, spare);
    398                }
    399          
    400                if (ret == STATUS_SUCCESS) {
    401                  ret = MTD_WaitReady(max_physical_block);
    402                }
    403          
    404                if (ret != STATUS_SUCCESS) {
    405                  /* SWL fail, area table and free table are no changed,
    406                   * so, nothing to do to recover.
    407                   */
    408                  break;
    409                }
    410              }
    411          
    412              if (ret == STATUS_SUCCESS) {
    413                ASSERT(i == PAGE_PER_PHY_BLOCK);
    414                /* UPDATE area table. no need to touch cache block even exists */
    415                logical_block = ((anchor_table.swl_current_area) * CFG_PHY_BLOCK_PER_AREA) + min_block_offset;
    416                INDEX_Update_AreaUpdate(logical_block, max_physical_block, max_block_ec);
    417          
    418                /* update the free block table */
    419                INDEX_FreeBlock_SwapMaxECBlock(min_physical_block, min_block_ec);
    420          
    421                /* update index table (free block, and area index table if need) and
    422                 * area table at once.
    423                 */
    424                ret = INDEX_Update_Commit();
    425              }
    426            } else {
    427              /* do SWL in next area in the next cycle */
    428              anchor_table.swl_current_area = (anchor_table.swl_current_area + 1) % AREA_COUNT;
    429            }
    430            return ret;
    431          }
    432          
    433          STATUS UBI_ReadStatus(LOG_BLOCK block) {
    434            /* when choose journal blocks, erase free blocks, and choose other
    435             * blocks in different dice through calling this function to get
    436             * the status of nand dice.
    437             *
    438             * when writing journal blocks, write data to on block, and write other
    439             * data to different blocks in different dice through calling this function
    440             * to get the status of block programming, then achieve intereleave
    441             * programming across all dice.
    442             */
    443            PHY_BLOCK phy_block;
    444            STATUS ret = STATUS_SUCCESS;
    445          
    446            phy_block = AREA_GetBlock(block);
    447            ASSERT(phy_block != INVALID_BLOCK);
    448          
    449            ret = MTD_ReadStatus(phy_block);
    450          
    451            return ret;
    452          }
    453          
    454          static STATUS ubi_reclaim_badblock(LOG_BLOCK log_block, PHY_BLOCK phy_block,
    455                                             ERASE_COUNT phy_block_ec, PAGE_OFF bad_page,
    456                                             PHY_BLOCK* new_phy_block,
    457                                             ERASE_COUNT* new_phy_ec) {
    458            PHY_BLOCK new_block;
    459            ERASE_COUNT new_ec;
    460            PAGE_OFF i;
    461            STATUS ret = STATUS_SUCCESS;
    462            SPARE spare;
    463          
    464            /* Reclaim Bad Block:
    465             * - get another free block, if none, return fail
    466             * - reclaim bad block, copying 0~page-1
    467             * - add bad block to free block table, with ec+100.*/
    468          
    469            if (ret == STATUS_SUCCESS) {
    470              ret = INDEX_FreeBlock_Get(phy_block, &new_block, &new_ec);
    471            }
    472          
    473            if (ret == STATUS_SUCCESS) {
    474              /* copy pages */
    475              for (i = 0; i < bad_page; i++) {
    476                if (ret == STATUS_SUCCESS) {
    477                  (void) MTD_Read(phy_block, i, tmp_data_buffer, spare);
    478                  ret = MTD_Program(new_block, i, tmp_data_buffer, spare);
    479                }
    480          
    481                if (ret == STATUS_SUCCESS) {
    482                  ret = MTD_WaitReady(new_block);
    483                }
    484          
    485                if (ret != STATUS_SUCCESS) {
    486                  break;
    487                }
    488              }
    489            }
    490          
    491            if (ret == STATUS_SUCCESS) {
    492              /* put back bad block to free blocks with a higher ec to prevent
    493               * using soon. The block will be discarded only when erase failed.
    494               */
    495              INDEX_FreeBlock_Put(phy_block, phy_block_ec + STATIC_WL_THRESHOLD);
    496              INDEX_Update_AreaUpdate(log_block, new_block, new_ec);
    497              ret = INDEX_Update_Commit();
    498            }
    499          
    500            if (ret == STATUS_SUCCESS) {
    501              *new_phy_block = new_block;
    502              *new_phy_ec = new_ec;
    503            } else {
    504              *new_phy_block = INVALID_BLOCK;
    505              *new_phy_ec = INVALID_EC;
    506            }
    507          
    508            return ret;
    509          }
    510          
    511          static UINT32 ubi_find_die_buffer(PHY_BLOCK block) {
    512            UINT32 i;
    513            UINT32 die_index = block >> BLOCK_PER_PLANE_SHIFT;
    514          
    515            for (i = 0; i < TOTAL_DIE_COUNT; i++) {
    516              if ((dice_hold[i].phy_block) != INVALID_BLOCK
    517                  && ((dice_hold[i].phy_block) >> BLOCK_PER_PLANE_SHIFT) == die_index) {
    518                break;
    519              }
    520            }
    521            ASSERT(i != TOTAL_DIE_COUNT);
    522            return i;
    523          }

   Maximum stack usage in bytes:

   .cstack Function
   ------- --------
      32   UBI_Erase
        32   -> AREA_GetBlock
        32   -> AREA_GetEC
        32   -> INDEX_FreeBlock_Get
        32   -> INDEX_FreeBlock_Put
        32   -> INDEX_Update_AreaUpdate
        32   -> INDEX_Update_Commit
        32   -> UBI_Flush
        32   -> UBI_SWL
        32   -> UBI_Write
      16   UBI_Flush
        16   -> UBI_Write
      24   UBI_Format
        24   -> ANCHOR_Format
        24   -> ANCHOR_Format_Clean
        24   -> ANCHOR_Init
        24   -> ANCHOR_IsBadBlock
        24   -> ANCHOR_LogBadBlock
        24   -> AREA_Format
        24   -> INDEX_Format
        24   -> MTD_CheckBlock
        24   -> MTD_Erase
        24   -> uart_printf
      32   UBI_Init
        32   -> ANCHOR_Init
        32   -> AREA_CheckUpdatePLR
        32   -> AREA_Init
        32   -> INDEX_Init
        32   -> INDEX_Update_AreaUpdate
        32   -> INDEX_Update_Commit
        32   -> uart_printf
      24   UBI_Read
        24   -> AREA_GetBlock
        24   -> MTD_Read
        24   -> __aeabi_memset
       8   UBI_ReadStatus
         8   -> AREA_GetBlock
         8   -> MTD_ReadStatus
      40   UBI_SWL
        40   -> AREA_FindMinECBlock
        40   -> INDEX_FreeBlock_GetMaxECBlock
        40   -> INDEX_FreeBlock_SwapMaxECBlock
        40   -> INDEX_Update_AreaUpdate
        40   -> INDEX_Update_Commit
        40   -> MTD_Erase
        40   -> MTD_Program
        40   -> MTD_Read
        40   -> MTD_WaitReady
        40 __aeabi_uidivmod
      56   UBI_Write
        56   -> AREA_GetBlock
        56   -> AREA_GetEC
        56   -> BUF_Free
        56   -> MTD_Program
        56   -> MTD_WaitReady
        56   -> ubi_find_die_buffer
        56   -> ubi_reclaim_badblock
      40   printint
        40   -> UartWrite
        40 __aeabi_uidiv
        40 __aeabi_uidivmod
      56   printuint
        56   -> UartWrite
        56 __aeabi_uidiv
        56 __aeabi_uidivmod
      40   uart_printf
        40   -> UartWrite
        40   -> printint
        40   -> printuint
       4   ubi_find_die_buffer
      40   ubi_reclaim_badblock
        40   -> INDEX_FreeBlock_Get
        40   -> INDEX_FreeBlock_Put
        40   -> INDEX_Update_AreaUpdate
        40   -> INDEX_Update_Commit
        40   -> MTD_Program
        40   -> MTD_Read
        40   -> MTD_WaitReady


   Section sizes:

   Bytes  Function/Label
   -----  --------------
       4  ??DataTable10
       4  ??DataTable10_1
       4  ??DataTable10_2
       4  ??DataTable10_3
       4  ??DataTable10_4
       4  ??DataTable3
       4  ??DataTable4
       4  ??DataTable4_1
       4  ??DataTable4_2
       4  ??DataTable4_3
       4  ??DataTable4_4
       4  ??DataTable4_5
       4  ??DataTable4_6
       4  ??DataTable4_7
       4  ??DataTable5
       4  ??DataTable5_1
       4  ??DataTable6
       8  ?_0
      40  ?_1
      44  ?_2
      24  ?_3
      28  ?_4
     200  UBI_Erase
      52  UBI_Flush
     234  UBI_Format
     188  UBI_Init
     102  UBI_Read
      30  UBI_ReadStatus
     246  UBI_SWL
     574  UBI_Write
      28  dice_hold
      20  digits
      20  digits
       4  last_position
     104  printint
      64  printuint
    2048  tmp_data_buffer
     210  uart_printf
      54  ubi_find_die_buffer
     178  ubi_reclaim_badblock
      24  -- Other

 
 2 080 bytes in section .bss
    40 bytes in section .data
   168 bytes in section .rodata
 2 304 bytes in section .text
 
 2 304 bytes of CODE  memory
   168 bytes of CONST memory
 2 120 bytes of DATA  memory

Errors: none
Warnings: none
